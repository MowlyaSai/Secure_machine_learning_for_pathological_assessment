import tenseal as ts
import numpy as np
import xgboost as xgb
import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from imblearn.over_sampling import SMOTE
from sklearn.impute import SimpleImputer

# ==========================================
# ðŸ”¹ STEP 1: LOAD DATA & TRAIN XGBOOST MODEL
# ==========================================

# Load dataset
file_path = "data_update9.xlsx"
df = pd.read_excel(file_path)

# Assume first column is ID, second column is target, and rest are features
X = df.iloc[:, 2:].values  # Features
y = df.iloc[:, 1].values   # Target labels

# Handle missing values
imputer = SimpleImputer(strategy="mean")
X = imputer.fit_transform(X)

# Encode target labels
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Handle class imbalance
smote = SMOTE(sampling_strategy=0.75, random_state=42)
X, y = smote.fit_resample(X, y)

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Train an XGBoost model
xgb_model = xgb.XGBClassifier(
    n_estimators=500, 
    max_depth=8, 
    learning_rate=0.03, 
    subsample=0.8, 
    colsample_bytree=0.8, 
    random_state=42, 
    eval_metric="logloss"
)
xgb_model.fit(X_train, y_train)

# Evaluate model
y_pred = xgb_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("XGBoost Model Evaluation:")
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-Score: {f1:.4f}")

# Extract feature importances
feature_importances = xgb_model.feature_importances_
threshold = np.mean(feature_importances)

# ==========================================
# ðŸ”¹ SETUP CKKS HOMOMORPHIC ENCRYPTION
# ==========================================

def create_ckks_context():
    context = ts.context(
        ts.SCHEME_TYPE.CKKS,
        poly_modulus_degree=8192,
        coeff_mod_bit_sizes=[60, 40, 40, 60]
    )
    context.global_scale = 2**40
    context.generate_galois_keys()
    context.generate_relin_keys()
    public_context = context.copy()
    public_context.make_context_public()
    return context, public_context

private_ctx, public_ctx = create_ckks_context()

# ==========================================
# ðŸ”¹ SAVE XGBOOST MODEL COMPONENTS
# ==========================================

# Create a dictionary with all necessary components
xgb_components = {
    'model': xgb_model,
    'imputer': imputer,
    'label_encoder': label_encoder,
    'scaler': scaler,
    'smote': smote,
    'feature_importances': feature_importances,
    'threshold': threshold,
    'private_ctx': private_ctx.serialize(save_secret_key=True),
    'public_ctx': public_ctx.serialize(),
    'model_type': 'xgb'
}

# Save to pickle file
with open('xgb_encrypted_model.pkl', 'wb') as f:
    pickle.dump(xgb_components, f)

print("âœ… XGBoost components saved to xgb_encrypted_model.pklÂ successfully!")
